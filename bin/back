#!/usr/bin/env zsh
# -*- mode: sh; -*-
#
# Usage:
# back # to backup everything and send them
# back --only-send # to just send the backups to cloud
# back --hdd # to only transfer the backupts to encrypted HDD
# back --create-private # to only create a bakcup of keys
#
# To restore backup:
# Have the keys in ~/$BORG_CONFIG_DIR/keys
# export NAME=backups
# export BORG_PASSPHRASE=`pass show borg-$NAME | head -n1`
# list backups
# borg list ~/borg/repost/$NAME
# borg export-tar /borg/repos/$NAME::archive out.tar

# Helper functions to display log
function info() { 
  echo '{{ Color "99" "0" " '''$(date -Iminutes)''' " }} {{  "'''$*'''" }} ' | gum format -t template 
}
function error() { 
  echo '{{ Color "196" "0" " '''$(date -Iminutes)''' " }} {{  Color "196" "'''$*'''" }} ' | gum format -t template 
}
function clean_up() {
  info Unmounting /mnt/backup
  sudo umount /mnt/backup
  sudo cryptsetup close backup
}
trap 'echo; error "Backup interrupted"; clean_up; exit 2' INT TERM
# set -x # Uncomment to debug

# Creates a backup using borg
# It uses pass password manager to get passwords
# --
# First argument is the path to backup
# Second argument is the borg backup name
# Argmenuts after the second one are passed to borg
function borg_backup() {
    local SOURCE=$1
    local NAME=$2
    local OPTIONS="$@[3,-1]"
    local BORG_REPO=$BORG_CONFIG_DIR/repos/$NAME
    # Use pass to automatically read password for borg backup
    export BORG_PASSPHRASE=`pass show borg-$NAME | head -n1`

    if [ ! -d "$SOURCE" ]; then
        # Control will enter here if $DIRECTORY doesn't exist.
        error "$SOURCE does not exist"
        exit 1
    fi

    if [ ! -d "$BORG_REPO" ] || [ -z "$(ls -A $BORG_REPO)" ]; then
        info "Creating borg repo at $BORG_REPO"
        borg init -e keyfile --make-parent-dirs "$BORG_REPO"
    fi

    if [ ! -d "/home/samim/borg/keys/" ]; then
        # Control will enter here if $DIRECTORY doesn't exist.
        error "Keys do not exist at $BORG_CONFIG_DIR/keys"
        exit 1
    fi

    if [ -z "$(ls -A $BORG_CONFIG_DIR/keys)" ]; then
        error "Keys do not exist at $BORG_CONFIG_DIR/keys"
        exit 1
    fi

    # Create the backup
    info "Starting backup from '$SOURCE' to repo '$NAME'"
    eval borg create --exclude-if-present '.borgignore' \
      $OPTIONS -C lzma,4 --stats --list $BORG_REPO::{now} $SOURCE

    backup_exit=$?

    borg prune                          \
         --list                          \
         --show-rc                       \
         --keep-daily    1               \
         --keep-weekly   1               \
         --keep-monthly  1               \
         $BORG_REPO

    prune_exit=$?

    # use highest exit code as global exit code
    global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

    if [ ${global_exit} -eq 1 ];
    then
        error "Backup and/or Prune finished with a warning"
    fi

    if [ ${global_exit} -gt 1 ];
    then
        error "Backup and/or Prune finished with an error"
    fi

    export BORG_PASSPHRASE=""
}

# Creates a backup for a path accessible via SSH
# It first mounts the path locally using SSHFS
function borg_remote_backup() {
    local REMOTE=$1
    local PREV=$PWD
    local SOURCE=/tmp/$RANDOM
    local NAME=$2
    local OPTIONS="$@[3,-1]"
    local BORG_REPO=$BORG_CONFIG_DIR/repos/$NAME

    mkdir $SOURCE
    sshfs $REMOTE $SOURCE
    local SSHFS_EXIT=$?

    cd $SOURCE

    if [ ${SSHFS_EXIT} != 0 ];
    then
        error "Cannot connect to $REMOTE"
        return 1;
    fi

    borg_backup . $NAME $OPTIONS
    cd
    sudo umount -f $SOURCE
    # rm -rf $SOURCE
}

# This creates a gpg encrypted tar using my private key
# --
# First argument is the path to create archive from
# Second argument is the path to create the archive to
function make_tar_gpg() {
    # Decrypt: 
    # gpg -d your_archive.tgz.gpg | tar xz
    info "Creating tar archive encrypted with gpg key from $1"
    local SOURCE=$1
    local PREV_DIR=$PWD

    if [ ! -d "$SOURCE" ]; then
        error "$SOURCE does not exist"
        exit 1
    fi

    if [ ! -d "$SOURCE" ]; then
        error "$SOURCE does not exist"
        exit 1
    fi

    if [ -n "$(find $SOURCE -prune -empty 2>/dev/null)" ]; then
        error "$SOURCE is empty"
        exit 1
    fi

    cd $SOURCE
    tar czf - . | gpg -e -r psamim@gmail.com > $2
    cd $PREV_DIR
}

# This creates a gpg symmetric encrypted tar
# --
# First argument is the path to create archive from
# Second argument is the path to create the archive to
function make_tar_gpg_sym() {
    # https://askubuntu.com/questions/95920/encrypt-tar-gz-file-on-create
    # Decrypt: 
    # gpg -d your_archive.tgz.gpg | tar xz
    info "Creating tar archive symmetrically encrypted from $1"
    prev_dir=$PWD
    cd $1
    tar czf - . | gpg -c --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 --s2k-count 65536 -o $2
    local exit=$?
    cd $prev_dir

    if [ ${exit} != 0 ];
    then
        error "Creating archive finished with errors"
        exit 1
    fi
}

# This sends the given directory to various destinations using rclone
# --
# First argument is the path to send
# Second argument is path in the remote destination
function send_cloud() {
    info "Sending '$1' to cloud as name '$2'"
    for remote in drive storj; do
        info "Sending to remote '$remote'"
        rclone sync --progress --quiet --transfers=1 $1 $remote:$2
        echo # New Line
    done
}

# This sends the given directory to various destinations using rclone
# --
# First argument is the path to send
# Second argument is path in the remote destination
function send_local() {
    info "Sending '$1' to local server as name '$2'"
    rclone sync --sftp-disable-hashcheck=true --transfers=1 --ignore-size --progress --quiet $1 passport:/mnt/mybook/$2
}

# This creates a backup of my SSH, GPG and Borg keys
# in a symmetrically encrypted tar file
# --
# First argument is the path the backup is created at
function create_private_file() {
    info "Creating private file"

    if [ ! -d "/home/samim/borg/keys/" ]; then
        # Control will enter here if $DIRECTORY doesn't exist.
        error "Keys do not exist at $BORG_CONFIG_DIR/keys"
        exit 1
    fi

    if [ -z "$(ls -A $BORG_CONFIG_DIR/keys)" ]; then
        error "Keys do not exist at $BORG_CONFIG_DIR/keys"
        exit 1
    fi

    local TEMP_PRIVATE_DIR=/tmp/$RANDOM
    local PRIVATE_FILE=$1
    mkdir -p $TEMP_PRIVATE_DIR
    rsync -rvzl ~/.gnupg/ $TEMP_PRIVATE_DIR/gnupg
    rsync -rvzl ~/.ssh/ $TEMP_PRIVATE_DIR/ssh
    rsync -rvzl  --exclude "repos" --exclude "cache" ~/borg $TEMP_PRIVATE_DIR
    make_tar_gpg_sym $TEMP_PRIVATE_DIR $PRIVATE_FILE
    rm -rf $TEMP_PRIVATE_DIR

    if [ -e $PRIVATE_FILE ];
    then
        info "File created in $PRIVATE_FILE"
    fi
}


# This mounts my LUKS encrypted HDD
# and transfers my backups to it using rsync and rclone
function borg_hdd_backup {
  local MOUNT_HDD="/mnt/backup"
  # local DEV_PATH="/dev/disk/by-uuid/3b56f940-32e6-41f8-aeb8-f01f4783dadd"
  local DEV_PATH="/dev/disk/by-uuid/cf3b648c-a125-4feb-8110-852353cba08c"
  local LUKS_PASSPHRASE=`pass show backup-hdd-luks | head -n1`

  if [ ! -d "$MOUNT_HDD" ] || [ -z "$(ls -A $MOUNT_HDD)" ]; then
    info "Mounting"
    echo "$LUKS_PASSPHRASE" | sudo cryptsetup open "$DEV_PATH" backup -
    sudo mount -t ext4 /dev/mapper/backup $MOUNT_HDD
    sudo chown $USERNAME $MOUNT_HDD
  fi

  if [ ! -d "$MOUNT_HDD" ] || [ -z "$(ls -A $MOUNT_HDD)" ]; then
    clean_up
    error "Could not mount!"
    exit
  fi

  # rsync -a central:/mnt/photoprism/originals "$MOUNT_HDD/photophrism" --info=progress2 --no-inc-recursive --inplace -W --no-compress
  info "Starting backup"
  info "Make sure you are on your home network."
  rsync -a "$BORG_CONFIG_DIR/repos" "$MOUNT_HDD/borg" --info=progress2 --no-inc-recursive --inplace -W --no-compress --info=progress2
  rclone sync passport:/mnt/data/all/photoprism/originals/ "$MOUNT_HDD/photophrism-originals" -P --transfers 5 --size-only # --ignore-checksum
  rclone sync passport:/mnt/data/all/raffi-tg.tar.xz "$MOUNT_HDD/tg/" -P --transfers 5 --size-only # --ignore-checksum
  rclone sync passport:/mnt/data/all/MRIs "$MOUNT_HDD/MRIs/" -P --transfers 5 --size-only # --ignore-checksum
  sudo umount /mnt/backup
  sudo cryptsetup close backup
}

function storj_backup {
  info "Starting backup to storj"
  rclone sync /home/samim/borg/repos/ storj:borg-repos/ -P --transfers 3
  rclone sync mobin-passport:/mnt/data/all/MRIs "storj:backup/MRIs/" -P --transfers 3
  rclone sync mobin-passport:/mnt/data/all/raffi-tg.tar.xz "storj:backup/tg/" -P --transfers 3
  rclone sync mobin-passport:/mnt/data/all/photoprism/originals/ "storj:backup/photophrism-originals" -P --transfers 3
} 

function main() {
    if [ "$1" = "--create-private" ]; then
        create_private_file "$HOME/Engineering.pdf"
        exit
    fi

    if [ "$1" = "--storj" ]; then
        storj_backup
        exit
    fi

    if [ "$1" = "--hdd" ]; then
        borg_hdd_backup
        exit
    fi

    if [ "$1" != "--only-send" ]
    then
      # Backup passwords
      local TEMP_PASS_BACKUP="/home/samim/pass.tgz.gpg"
      make_tar_gpg ~/.password-store/ "$TEMP_PASS_BACKUP"
      send_local $TEMP_PASS_BACKUP ""
      send_cloud $TEMP_PASS_BACKUP pass
      rm $TEMP_PASS_BACKUP

      borg_remote_backup central:/mnt/data/all/paperless-media/documents/originals docs
      borg_remote_backup central:/home/central/server-compose hass
      borg_backup /home/samim/tombs/backups/ backups # -e 'mail/'
      borg_backup /home/samim/Calibre calibre

      send_local /home/samim/borg/repos/backups borg-repos/backups
      send_local /home/samim/borg/repos/calibre borg-repos/calibre
      send_local /home/samim/borg/repos/hass borg-repos/hass
      send_local /home/samim/borg/repos/docs borg-repos/docs
    else
      info "Only sending to remotes..."
      send_cloud /home/samim/borg/repos/backups borg-repos/backups
      send_cloud /home/samim/borg/repos/calibre borg-repos/calibre
      send_cloud /home/samim/borg/repos/docs borg-repos/docs
    fi

}

main $@
info Done
